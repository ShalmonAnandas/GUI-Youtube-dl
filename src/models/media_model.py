r"""
generated by json2python-models v0.3.1 at Fri Dec 27 17:03:06 2024
command: C:\Users\Shalmon Anandas\AppData\Local\Programs\Python\Python311\Scripts\json2models -m MediaModel file.json -f pydantic
"""
from pydantic.v1 import BaseModel, Field
from typing import List, Literal, Optional, Union


class Fragment(BaseModel):
    url: Optional[str] = None
    duration: Optional[float] = None


class Thumbnail(BaseModel):
    url: Optional[str] = None
    preference: Optional[int] = None
    id_: Optional[int] = Field(..., alias="id")
    height: Optional[int] = None
    width: Optional[int] = None
    resolution: Optional[Literal["168x94", "1920x1080", "196x110", "246x138", "336x188", "480x360", "640x480"]] = None


class AutomaticCaption(BaseModel):
    en: List['ACCModel']
    ab: List['ACCModel']
    aa: List['ACCModel']
    af: List['ACCModel']
    ak: List['ACCModel']
    sq: List['ACCModel']
    am: List['ACCModel']
    ar: List['ACCModel']
    hy: List['ACCModel']
    as_: List['ACCModel'] = Field(..., alias="as")
    ay: List['ACCModel']
    az: List['ACCModel']
    bn: List['ACCModel']
    ba: List['ACCModel']
    eu: List['ACCModel']
    be: List['ACCModel']
    bho: List['ACCModel']
    bs: List['ACCModel']
    br: List['ACCModel']
    bg: List['ACCModel']
    my: List['ACCModel']
    ca: List['ACCModel']
    ceb: List['ACCModel']
    zh_hans: List['ACCModel'] = Field(..., alias="zh-Hans")
    zh_hant: List['ACCModel'] = Field(..., alias="zh-Hant")
    co: List['ACCModel']
    hr: List['ACCModel']
    cs: List['ACCModel']
    da: List['ACCModel']
    dv: List['ACCModel']
    nl: List['ACCModel']
    dz: List['ACCModel']
    enorig: List['ACCModel'] = Field(..., alias="en-orig")
    eo: List['ACCModel']
    et: List['ACCModel']
    ee: List['ACCModel']
    fo: List['ACCModel']
    fj: List['ACCModel']
    fil: List['ACCModel']
    fi: List['ACCModel']
    fr: List['ACCModel']
    gaa: List['ACCModel']
    gl: List['ACCModel']
    lg: List['ACCModel']
    ka: List['ACCModel']
    de: List['ACCModel']
    el: List['ACCModel']
    gn: List['ACCModel']
    gu: List['ACCModel']
    ht: List['ACCModel']
    ha: List['ACCModel']
    haw: List['ACCModel']
    iw: List['ACCModel']
    hi: List['ACCModel']
    hmn: List['ACCModel']
    hu: List['ACCModel']
    is_: List['ACCModel'] = Field(..., alias="is")
    ig: List['ACCModel']
    id_: List['ACCModel'] = Field(..., alias="id")
    iu: List['ACCModel']
    ga: List['ACCModel']
    it: List['ACCModel']
    ja: List['ACCModel']
    jv: List['ACCModel']
    kl: List['ACCModel']
    kn: List['ACCModel']
    kk: List['ACCModel']
    kha: List['ACCModel']
    km: List['ACCModel']
    rw: List['ACCModel']
    ko: List['ACCModel']
    kri: List['ACCModel']
    ku: List['ACCModel']
    ky: List['ACCModel']
    lo: List['ACCModel']
    la: List['ACCModel']
    lv: List['ACCModel']
    ln: List['ACCModel']
    lt: List['ACCModel']
    lua: List['ACCModel']
    luo: List['ACCModel']
    lb: List['ACCModel']
    mk: List['ACCModel']
    mg: List['ACCModel']
    ms: List['ACCModel']
    ml: List['ACCModel']
    mt: List['ACCModel']
    gv: List['ACCModel']
    mi: List['ACCModel']
    mr: List['ACCModel']
    mn: List['ACCModel']
    mfe: List['ACCModel']
    ne: List['ACCModel']
    new: List['ACCModel']
    nso: List['ACCModel']
    no: List['ACCModel']
    ny: List['ACCModel']
    oc: List['ACCModel']
    or_: List['ACCModel'] = Field(..., alias="or")
    om: List['ACCModel']
    os: List['ACCModel']
    pam: List['ACCModel']
    ps: List['ACCModel']
    fa: List['ACCModel']
    pl: List['ACCModel']
    pt: List['ACCModel']
    pt_pt: List['ACCModel'] = Field(..., alias="pt-PT")
    pa: List['ACCModel']
    qu: List['ACCModel']
    ro: List['ACCModel']
    rn: List['ACCModel']
    ru: List['ACCModel']
    sm: List['ACCModel']
    sg: List['ACCModel']
    sa: List['ACCModel']
    gd: List['ACCModel']
    sr: List['ACCModel']
    crs: List['ACCModel']
    sn: List['ACCModel']
    sd: List['ACCModel']
    si: List['ACCModel']
    sk: List['ACCModel']
    sl: List['ACCModel']
    so: List['ACCModel']
    st: List['ACCModel']
    es: List['ACCModel']
    su: List['ACCModel']
    sw: List['ACCModel']
    ss: List['ACCModel']
    sv: List['ACCModel']
    tg: List['ACCModel']
    ta: List['ACCModel']
    tt: List['ACCModel']
    te: List['ACCModel']
    th: List['ACCModel']
    bo: List['ACCModel']
    ti: List['ACCModel']
    to: List['ACCModel']
    ts: List['ACCModel']
    tn: List['ACCModel']
    tum: List['ACCModel']
    tr: List['ACCModel']
    tk: List['ACCModel']
    uk: List['ACCModel']
    ur: List['ACCModel']
    ug: List['ACCModel']
    uz: List['ACCModel']
    ve: List['ACCModel']
    vi: List['ACCModel']
    war: List['ACCModel']
    cy: List['ACCModel']
    fy: List['ACCModel']
    wo: List['ACCModel']
    xh: List['ACCModel']
    yi: List['ACCModel']
    yo: List['ACCModel']
    zu: List['ACCModel']


class Subtitle(BaseModel):
    en: List['ACCModel']


class Chapter(BaseModel):
    start_time: Optional[float] = None
    title: Optional[str] = None
    end_time: Optional[float] = None


class ACCModel(BaseModel):
    ext: Literal["json3", "srv1", "srv2", "srv3", "ttml", "vtt"]
    url: Optional[str] = None
    name: Optional[str] = None
    protocol: Optional[Literal["m3u8_native"]] = None

class MediaModel(BaseModel):
    format_id: Union[int, Literal["139-drc", "140-drc", "625+140", "sb0", "sb1", "sb2", "sb3"]]
    tbr: Optional[float] = None
    ext: Literal["m4a", "mhtml", "mp4"]
    protocol: Literal["https", "m3u8_native", "m3u8_native+https", "mhtml"]
    vcodec: Optional[str] = None
    resolution: Optional[str] = None
    abr: Optional[float] = None
    vbr: Optional[float] = None
    format_: str = Field(..., alias="format")
    url: Optional[str] = None
    manifest_url: Optional[str] = None
    fps: Optional[float] = None
    quality: Optional[float] = None
    has_drm: Optional[bool] = None
    width: Optional[int] = None
    height: Optional[int] = None
    acodec: Optional[Literal["mp4a.40.2", "mp4a.40.5", "none"]] = None
    dynamic_range: Optional[Literal["SDR"]] = None
    source_preference: Optional[int] = None
    aspect_ratio: Optional[float] = None
    video_ext: Optional[Literal["mp4", "none"]] = None
    audio_ext: Optional[Literal["m4a", "mp4", "none"]] = None
    asr: Optional[int] = None
    filesize: Optional[int] = None
    format_note: Optional[str] = None
    audio_channels: Optional[int] = None
    filesize_approx: Optional[int] = None
    language: Optional[Literal["en"]] = None
    language_preference: Optional[int] = None
    container: Optional[Literal["m4a_dash", "mp4_dash"]] = None
    downloader_options: Optional['DownloaderOption'] = None
    rows: Optional[int] = None
    columns: Optional[int] = None
    fragments: Optional[List['Fragment']] = []
    id_: Optional[Literal["cgfx2mLSI-A"]] = Field(None, alias="id")
    title: Optional[str] = None
    formats: Optional[List['MediaModel']] = []
    thumbnails: Optional[List['Thumbnail']] = []
    thumbnail: Optional[str] = None
    description: Optional[str] = None
    channel_id: Optional[str] = None
    channel_url: Optional[str] = None
    duration: Optional[int] = None
    view_count: Optional[int] = None
    age_limit: Optional[int] = None
    webpage_url: Optional[str] = None
    categories: Optional[List[str]] = []
    tags: Optional[List[str]] = []
    playable_in_embed: Optional[bool] = None
    live_status: Optional[Literal["not_live"]] = None
    release_timestamp: Optional[None] = None
    _format_sort_fields: Optional[List[str]] = []
    automatic_captions: Optional['AutomaticCaption'] = None
    subtitles: Optional['Subtitle'] = None
    chapters: Optional[List['Chapter']] = []
    like_count: Optional[int] = None
    channel: Optional[Literal["Linus Tech Tips"]] = None
    channel_follower_count: Optional[int] = None
    channel_is_verified: Optional[bool] = None
    uploader: Optional[Literal["Linus Tech Tips"]] = None
    uploader_id: Optional[Literal["@LinusTechTips"]] = None
    uploader_url: Optional[str] = None
    upload_date: Optional[int] = None
    timestamp: Optional[int] = None
    availability: Optional[Literal["public"]] = None
    original_url: Optional[str] = None
    webpage_url_basename: Optional[Literal["watch"]] = None
    webpage_url_domain: Optional[Literal["youtube.com"]] = None
    extractor: Optional[Literal["youtube"]] = None
    extractor_key: Optional[Literal["Youtube"]] = None
    display_id: Optional[Literal["cgfx2mLSI-A"]] = None
    fulltitle: Optional[str] = None
    duration_string: Optional[Literal["22:26"]] = None
    is_live: Optional[bool] = None
    was_live: Optional[bool] = None
    requested_subtitles: Optional[None] = None
    epoch: Optional[int] = None
    requested_formats: Optional[List['MediaModel']] = []
    _type: Optional[Literal["video"]] = None
    _version: Optional['_version'] = None
    def __init__(self, **data: any):
        MediaModel.update_forward_refs()
        AutomaticCaption.update_forward_refs()
        Subtitle.update_forward_refs()
        Chapter.update_forward_refs()
        DownloaderOption.update_forward_refs()
        Fragment.update_forward_refs()
        ACCModel.update_forward_refs()
        super().__init__(**data)


class DownloaderOption(BaseModel):
    http_chunk_size: Optional[int] = None

